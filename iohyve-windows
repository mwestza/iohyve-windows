#!/bin/sh


__parse_cmd() {
	while [ $# -gt 0 ] ; do
        	case "$1" in
            		bootstrap)
				__bootstrap "$@"
                        	exit
                	;;
            		install)
				__install "$@"
                        	exit
                	;;
			*)
				__print_usage
				exit
			;;
		esac
		shift
	done
}

__print_usage() {
	echo "usage:"
	printf "\t $0 bootstrap <win2k8|win2k12|all>\n"
	printf "\t $0 install <win2k8|win2k12> <path-to-iso>\n"
}

__bootstrap() {
	echo "bootstrapping"
	local winname="$2"
	if [ ! -d /usr/local/etc/windows-iohyve ]; then
		mkdir /usr/local/etc/windows-iohyve	
	fi
	if [ ! -d /usr/local/etc/windows-iohyve/autoxml ]; then
		printf "fetching autoinstall scripts: "
		git clone https://github.com/nahanni/bhyve-windows-unattend-xml /usr/local/etc/windows-iohyve/autoxml > /dev/null 2>&1
		printf "done\n"
	fi
	if [ ! -e /usr/local/etc/windows-iohyve/BHYVE_UEFI_20151002.fd ]; then
		printf "fetching UEFI Firmware: "
		fetch https://people.freebsd.org/~grehan/bhyve_uefi/BHYVE_UEFI_20151002.fd -o /usr/local/etc/windows-iohyve/BHYVE_UEFI_20151002.fd > /dev/null 2>&1
		printf "done\n"
	fi
	if [ "$winname" = "win2k8" ] || [ "$winname" = "all" ] || [ -z $winname ]; then
		if [ ! -e /usr/local/etc/windows-iohyve/virtio-win-0.1-94.iso ]; then
			printf "fetching pre-Windows2k8 virtio driver: "
			fetch https://fedorapeople.org/groups/virt/virtio-win/deprecated-isos/archives/virtio-win-0.1-94/virtio-win-0.1-94.iso -o /usr/local/etc/windows-iohyve/virtio-win-0.1-94.iso > /dev/null 2>&1
			printf "done\n"
		fi
	fi
	if [ "$winname" = "win2k12" ] || [ "$winname" = "all" ] || [ -z $winname ]; then
		if  [ ! -e /usr/local/etc/windows-iohyve/virtio-win-0.1-96.iso ]; then
			printf "fetching post-Windows2k8 virtio driver: "
			fetch https://fedorapeople.org/groups/virt/virtio-win/repo/stable/virtio-win-0.1.96-1.noarch.rpm -o /usr/local/etc/windows-iohyve/virtio-win-0.1-96.iso > /dev/null 2>&1
			printf "done\n"
		fi
	fi
	echo "bootstrapping successful"
}

__create_iso() {
	local winversion="$2"
	local isopath="$3"

	echo "creating autoinstall iso started"

	if [ -e /usr/local/etc/windows-iohyve/isos/windows-iohyve-${winversion}.iso ] || [ ! -z "$(iohyve isolist | grep windows-iohyve-${winversion})" ]; then
		return
	fi

	local drivers="virtio-win-0.1-96.iso"
	if [ "$winversion" = "win2k8" ]; then
		drivers="virtio-win-0.1-94.iso"
	fi
	printf "extracting original iso: "
	mkdir -p /usr/local/etc/windows-iohyve/build-isos/${winversion}/virtio
	7z x ${isopath} -o/usr/local/etc/windows-iohyve/build-isos/${winversion} > /dev/null 2>&1
	tar xf /usr/local/etc/windows-iohyve/${drivers} -C /usr/local/etc/windows-iohyve/build-isos/${winversion}/virtio > /dev/null 2>&1
	printf "done\n"

	printf "packing autoboot iso: "

	case "$winversion" in
		"win2k8")
			cp /usr/local/etc/windows-iohyve/autoxml/files/win2k8_AutoUnattend.xml /usr/local/etc/windows-iohyve/build-isos/win2k8/AutoUnattend.xml > /dev/null 2>&1
		;;
		"win2k12")
			cp /usr/local/etc/windows-iohyve/autoxml/files/win2k12r2_AutoUnattend.xml /usr/local/etc/windows-iohyve/build-isos/win2k12/AutoUnattend.xml > /dev/null 2>&1
		;;
		"win2k16")
			cp /usr/local/etc/windows-iohyve/autoxml/files/win2k16preview_AutoUnattend.xml /usr/local/etc/windows-iohyve/build-isos/win2k16/AutoUnattend.xml > /dev/null 2>&1
		;;
			
	esac

	mkdir -p /usr/local/etc/windows-iohyve/isos
	mkisofs \
    		-b boot/etfsboot.com -no-emul-boot -c BOOT.CAT \
    		-iso-level 4 -J -l -D \
    		-N -joliet-long \
    		-relaxed-filenames -v \
    		-V "Custom" -udf \
    		-boot-info-table -eltorito-alt-boot -eltorito-platform 0xEF \
    		-eltorito-boot efi/microsoft/boot/efisys_noprompt.bin \
    		-no-emul-boot \
    		-o /usr/local/etc/windows-iohyve/isos/windows-iohyve-${winversion}.iso /usr/local/etc/windows-iohyve/build-isos/${winversion} > /dev/null 2>&1
	rm -rf /usr/local/etc/windows-iohyve/build-isos
	printf "done\n"
	echo "iso created"
}

__prepare() {
	local winversion="$1"
	local machinenumber="$2"
	local size="$3"
	if [ -z "$(iohyve isolist | grep windows-iohyve-${winversion}.iso)" ]; then
		iohyve cpiso /usr/local/etc/windows-iohyve/isos/windows-iohyve-${winversion}.iso
	fi
	if [ -z "$(iohyve isolist | grep windows-iohyve-null.iso)" ]; then
		touch /usr/local/etc/windows-iohyve/windows-iohyve-null.iso
		iohyve cpiso /usr/local/etc/windows-iohyve/windows-iohyve-null.iso
	fi
	if [ -z "$(iohyve fwlist | grep BHYVE_UEFI_20151002)" ]; then
		iohyve cpfw /usr/local/etc/windows-iohyve/BHYVE_UEFI_20151002.fd
	fi
	echo "before create"
	iohyve create ${winversion}_${machinenumber} ${size}
	echo "after create"
	iohyve set ${winversion}_${machinenumber} fw=BHYVE_UEFI_20151002.fd bargs="-H -w" ram=1024M
	echo "after set"
}

__first_run() {
	local winversion="$1"
	local machinenumber="$2"
	iohyve uefi ${winversion}_${machinenumber} ${winversion}.iso
}

__second_run() {
	local winversion="$1"
	local machinenumber="$2"
	iohyve uefi ${winversion}_${machinenumber} null.iso
}

__install() {
	if [ ! -d /usr/local/etc/windows-iohyve ]; then
		echo "cannot install windows guest: environment not bootstrapped"
		return
	fi
	local winversion="$2"
	local isopath="$3"
	if [ -z "$winversion" ] || [ -z "$isopath" ]; then
		__print_usage
		exit 1
	fi
	local machinenumber="$(iohyve list | grep ${winversion} | wc -l | tr -d ' ')"
	echo "creating iso"
	__create_iso $@
	echo "creating guest"
	__prepare $winversion $machinenumber "32G"
	echo "Installphase 1/3"
	__first_run $winversion $machinenumber
	sleep 5
	while __running ${winversion}_${machinenumber}; do
		sleep 5
	done
	echo "Installphase 2/3"
	__second_run $winversion $machinenumber
	while __running ${winversion}_${machinenumber}; do
		sleep 5
	done
	echo "Installphase 3/3"
	__second_run $winversion $machinenumber
	echo "Windows installed and running!!!"
}

__running() {
	local guestname="$1"
	if [ "$(iohyve list | grep $guestname | tr -s ' ' | cut -d ' ' -f3)" = NO ]; then
		return 1
	else
		return 0
	fi
}

if [ -z "$1" ] ; then
    __print_usage
    exit 0
fi

__parse_cmd "$@"
